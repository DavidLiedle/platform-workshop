{% extends "WorkshopTutorialBundle::pagelayout.html.twig" %}

{% block content %}
    <!-- Content -->
    <section class="below-navbar">
        <div class="container">
            <div class="row regular-content-size">
                <div class="col-xs-10 col-xs-offset-1 row-padding">
                    {% include "WorkshopTutorialBundle:parts:ride_search.html.twig" %}
                    <div class="col-xs-12">
                        <div class="col-xs-1 text-left">
                            <h2>{{ "Ride:"|trans }}</h2>
                        </div>
                        <div class="col-xs-11 text-left">
                            <h2 class="extra-padding-left">{{ ez_content_name(content) }}</h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section>
        <div class="container">
            <div class="row regular-content-size">
                <div class="col-xs-10 col-xs-offset-1">
                    <div id="map-container"></div>
                </div>
            </div>
        </div>
    </section>

    <section class="first-below-navbar">
        <div class="container">
            <div class="row regular-content-size">
                <div class="col-xs-10 col-xs-offset-1">
                    <h4 class="underscore-green"> </h4>
                </div>
                <div class="col-xs-10 col-xs-offset-1 padding-box">
                    <div class="col-xs-2">
                        <div class="box-ride">
                            <h3 class="special-number">{{ ez_field_value(content, "length").value }} Km</h3>
                            <p class="pre-small special-number special-number-margin"><strong>{{ "Level"|trans }}</strong></p>
                            <p class="text-center">
                                {% set difficulty = ez_field_value(content, "level").selection|first %}
                                {% for i in 0..difficulty %}<i class="fa fa-star star-color"></i>{% endfor %}
                            </p>
                        </div>
                    </div>
                    <div class="col-xs-10 bottom-extra">
                        <div class="col-xs-2 text-right">
                            <p>{{ "Name:"|trans }}</p>
                        </div>
                        <div class="col-xs-4">
                            <p class="strong">
                                {% for rider in ez_field_value(content, "riders").authors %}
                                    {{ rider.name }}
                                    {% if not loop.last %}<br>{% endif %}
                                {% endfor %}
                            </p>
                        </div>
                        <div class="col-xs-1 text-right">
                            <p>{{ "Start:"|trans }}</p>
                            <p>{{ "End:"|trans }}</p>
                        </div>
                        <div class="col-xs-5">
                            <p class="strong">{{ ez_field_value(content, "start_point") }}</p>
                            <p class="strong">{{ ez_field_value(content, "end_point") }}</p>
                        </div>
                    </div>
                    <div class="col-xs-10">
                        <div class="col-xs-2 text-right">
                            <p>{{ "Description:"|trans }}</p>
                        </div>
                        <div class="col-xs-10 text-justify">
                            {{ ez_render_field(content, "description") }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- BEGIN points of interest -->
    <section class="photos">
        <div class="container">
            <div class="row regular-content-size">
                <div class="col-xs-10 col-xs-offset-1" id="wrapper">
                    <div class="col-xs-12">
                        <h4 class="underscore-green">Points of interest:</h4>
                        {{ ez_render_field(content, 'points_of_interest', { "template": _self }) }}
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- END points of interest -->

    <section class="buttons">
        <div class="container">
            <div class="row regular-content-size">
                <div class="col-xs-5 button-padding">
                    <a href="#" class="button pull-right"><i class="fa fa-print fa-lg"></i> {{ "PRINT RIDE"|trans }}</a>
                </div>
                <div class="col-xs-5 col-xs-offset-2 button-padding">
                    <a href="#" class="button pull-left"><i class="fa fa-download fa-lg"></i> {{ "DOWNLOAD"|trans }}</a>
                </div>
            </div>
        </div>
    </section>
{% endblock %}

{% block ezobjectrelationlist_field %}
    {% if not ez_is_field_empty( content, 'points_of_interest' ) %}
        {% for contentId in ez_field_value(content, 'points_of_interest').destinationContentIds %}
            {% if loop.index > 0 and loop.index is divisible by(3) %}
                <div class="col-xs-12 padding-box"></div>
            {% endif %}

            {{ render( controller( "ez_content:viewAction", {'contentId': contentId, 'viewType': 'embed'} ) ) }}
        {% endfor %}
    {% endif %}
{% endblock %}

{% block footer_js %}
    {{ parent() }}
    <!-- Google Maps scripts -->
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script>
        {% set startValue = ez_field_value(content, "start_point") %}
        {% set endValue = ez_field_value(content, "end_point") %}
        // Define your locations: HTML content for the info window, latitude & longitude
        var locations = [
            ['<strong>{{ 'Start:'|trans }}</strong><p class="infowindow-text">{{ startValue.address }}</p>', {{ startValue.latitude }}, {{ startValue.longitude }}],
            ['<strong>{{ 'End:'|trans }}</strong><p class="infowindow-text">{{ endValue.address }}</p>', {{ endValue.latitude }}, {{ endValue.longitude }}]
        ];
        // Setup the different icons and shadows
        var iconURLPrefix = 'http://maps.google.com/mapfiles/ms/icons/';
        var icons = [
            iconURLPrefix + 'orange-dot.png',
            iconURLPrefix + 'green-dot.png',
            iconURLPrefix + 'green-dot.png',
            iconURLPrefix + 'blue-dot.png',
        ]
        var iconsLength = icons.length;
        var map = new google.maps.Map(document.getElementById('map-container'), {
            zoom: 8,
            center: new google.maps.LatLng(45.975951, 5.573571),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControl: false,
            streetViewControl: false,
            panControl: false,
            zoomControlOptions: {
                position: google.maps.ControlPosition.LEFT_BOTTOM
            }
        });
        var bikeLayer = new google.maps.BicyclingLayer();
        bikeLayer.setMap(map);
        var infowindow = new google.maps.InfoWindow({
            maxWidth: 200
        });
        var markers = new Array();
        var iconCounter = 0;
        // Add the markers and infowindows to the map
        for (var i = 0; i < locations.length; i++) {
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                map: map,
                icon: icons[iconCounter]
            });
            markers.push(marker);
            google.maps.event.addListener(marker, 'mouseover', (function(marker, i) {
                return function() {
                    infowindow.setContent(locations[i][0]);
                    infowindow.open(map, marker);
                }
            })(marker, i));
            iconCounter++;
            // We only have a limited number of possible icon colors, so we may have to restart the counter
            if(iconCounter >= iconsLength) {
                iconCounter = 0;
            }
        }
        function autoCenter() {
            //  Create a new viewpoint bound
            var bounds = new google.maps.LatLngBounds();
            //  Go through each...
            for (var i = 0; i < markers.length; i++) {
                bounds.extend(markers[i].position);
            }
            //  Fit these bounds to the map
            map.fitBounds(bounds);
        }
        autoCenter();
    </script>
{% endblock %}
